1. Create an EC2 service in the default subnet in the Ohio region

HCL Commands

provider "aws"{
region = "us-east-2"
 access_key = ""
 secret_key = ""
}

resource "aws_instance" "instance"{
 ami              = ""
 instance_type = ""
 tags ={
 Name = ""
 }
}

terraform init
terraform validate
terraform plan
terraform apply

=========================================================================================

2Q.Tasks To Be Performed:
1. Destroy the previous deployment
2. Create a new EC2 instance with an Elastic IP

terraform destroy

provider "aws"{
region = "us-east-2"
 access_key = ""
 secret_key = ""
}

resource "aws_instance" "ohio-instance"{
 ami              = ""
 instance_type = "t2.micro"
 tags ={
 Name = "hello"
 }
}

resource "aws_eip" "lb" {
  instance = aws_instance.ohio-instance.id
}

terraform init
terraform plan
terraform apply

=========================================================


3Q.Tasks To Be Performed:
1. Destroy the previous deployment
2. Create 2 EC2 instances in Ohio and N.Virginia respectively
3. Rename Ohio’s instance to ‘hello-ohio’ and Virginia’s instance to
‘hello-virginia’


terraform destroy

 provider "aws" {
  region     = "us-east-2"  # Ohio
  access_key = ""
  secret_key = ""
  alias      = "ohio"
}

provider "aws" {
  region     = "us-east-1"  # N. Virginia
  access_key = ""
  secret_key = ""
  alias      = "virginia"
}

resource "aws_instance" "hello_ohio" {
  provider          = aws.ohio
  ami               = ""
  instance_type     = "t2.micro"
  availability_zone = "us-east-2a"

  tags = {
    Name = "hello-ohio"
  }
}

resource "aws_instance" "hello_virginia" {
  provider          = aws.virginia
   ami               = ""
  instance_type     = "t2.micro"
  availability_zone = "us-east-1a"

  tags = {
    Name = "hello-virginia"
  }
}

output "ohio_instance_id" {
  value = aws_instance.hello_ohio.id
}

output "virginia_instance_id" {
  value = aws_instance.hello_virginia.id
}


terraform init
terraform plan
terraform apply

===============================================================


4Q.Tasks To Be Performed:
1. Destroy the previous deployments
2. Create a VPC with the required components using Terraform
3. Deploy an EC2 instance inside the VPC


terraform destroy

provider "aws" {
  region = "us-east-1"  
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "main-vpc"
  }
}

resource "aws_subnet" "public" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a" 
  tags = {
    Name = "public-subnet"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "public-route-table"
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}


resource "aws_instance" "web" {
  ami           = ""
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public.id

  tags = {
    Name = "web-instance"
  }
}

terraform init
terraform plan
terraform apply

=======================================================================================================================================================================

5Q. Tasks To Be Performed:
1. Destroy the previous deployments
2. Create a script to install Apache2
3. Run this script on a newly created EC2 instance
4. Print the IP address of the instance in a file on the local once deployed


terraform destory

provider "aws" {
  region = "us-east-2"
}

# Get default VPC
data "aws_vpc" "default" {
  default = true
}

# Security Group with Ingress and Egress rules
resource "aws_security_group" "web_sg" {
  name        = "web_sg"
  description = "Allow HTTP and SSH inbound traffic"
  vpc_id      = data.aws_vpc.default.id

  ingress {
    description = "Allow HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "Allow all outbound traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "WebSecurityGroup"
  }
}

# EC2 Instance
resource "aws_instance" "web" {
  ami           = "ami-0d1b5a8c13042c939"
  instance_type = "t2.micro"

  vpc_security_group_ids = [aws_security_group.web_sg.id]

  user_data = <<-EOF
            #!/bin/bash
             apt update
             apt install apache2 -y
             systemctl start apache2
             systemctl enable apache2
  EOF

  tags = {
    Name = "Apache2-Server"
  }
}

# Output the public IP of the instance
output "instance_ip" {
  value = aws_instance.web.public_ip
}

terraform init
terraform plan
terraform apply
